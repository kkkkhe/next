import Head from 'next/head'
import {GetServerSideProps} from "next";
import {allSettled, createEffect, createEvent, createStore, fork, sample, serialize} from "effector";
import {createGate, useGate, useStore, useUnit} from "effector-react";
import {equals} from "patronum";
const startApp = createEvent()
import {createFinalFormModel} from "@/pages/model";
const gate = createGate()
const loginSuccess = createEvent()
const $sessionUser = createStore<{name:string}>({name: ''})

export const $loggedIn = createStore(false)
    .on(loginSuccess, () => true)


const formModel = (() => {
    const initialize = createEvent()
    const loginFx = createEffect(async ({name}) => {
        const a = await new Promise((res) => {
            return setTimeout(() => res({status: 200, name}), 1000)
        })
        return a
    })

    const $$form = createFinalFormModel(initialize)
    //@ts-ignore
    sample({
        clock: $$form.submitTriggered,
        filter: equals($loggedIn, false),
        fn: (name) => ({name}),
        target: loginFx
    })
    //@ts-ignore
    sample({
        clock: loginFx.doneData,
        fn: (data) => ({
            name: data.name
        }),
        target: $sessionUser
    })
    sample({
        clock: loginFx.doneData,
        target:loginSuccess
    })
    return {
        submitTriggered: $$form.submitTriggered,
        form: $$form.form,
        initialize
    }
})()



// sample({
//     clock: startLoad,
//     target: fetchPostsFx
// })
//@ts-ignore
sample({
    clock: gate.open,
    target: formModel.initialize
})
formModel.initialize()

export default function Home() {
    const form = useUnit(formModel.form)
    useGate(gate)
    const data = useStore($sessionUser)
    const handleSubmit = (e) => {
        e.preventDefault()
        form?.submit()
    }
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
          <div>my name is: {data.name}</div>
          <form onSubmit={handleSubmit}>
              <input type="text" name={'name'} placeholder={'name'} defaultValue={form?.getState().values.name} onChange={(e) => form?.change('name',e.target.value)}/>
              <input type="text" name={'password'} defaultValue={form?.getState().values.password} onChange={(e) => form?.change('password', e.target.value)}/>
                <button>
                    Submit
                </button>
          </form>
      </main>
    </>
  )
}


// export const getStaticProps = async () => {
//     const data = await fetch('https://jsonplaceholder.typicode.com/todos')
//     const result = await data.json()
//     return {
//         props: {result}
//     }
// }

export const getServerSideProps:GetServerSideProps = async () => {
    // const store = config
        const scope = fork()
        await allSettled(startApp, {scope})
    return {
        props: {
            initialState: serialize(scope)
        }
    }
}