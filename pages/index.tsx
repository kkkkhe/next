import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import Link from "next/link";
import {GetServerSideProps} from "next";
import {useSelector} from "react-redux";
import {actions, selectors} from "@/src/entities/entity";
import {initializeStore} from "@/src/app";
import {useEffect, useState} from "react";
import {serverSideTranslations} from "next-i18next/serverSideTranslations";
import {useTranslation} from "next-i18next";
import {useRouter} from "next/router";

const inter = Inter({ subsets: ['latin'] })

export default function Home() {
    const todos = useSelector(selectors.todos)
    const {t} = useTranslation('common')
    const router = useRouter()
    const changeLocale = (newLocale: 'uk' | 'en') => {
        const {pathname, query,asPath} = router
        router.push({pathname, query}, asPath, {locale: newLocale})
    }

    const changeLocaleTo = router.locale == 'uk' ? 'en' : 'uk'

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <Link href={'/posts'}>
            go to posts
        </Link>
          <button onClick={() => changeLocale('uk')}>
              {t('change-to-uk')}
          </button>
          <button onClick={() => changeLocale('en')}>
              {t('change-to-en')}
          </button>
          <div>
              {t('sample-text')}
          </div>
          <div>
              {todos?.map((item) => {
                  return (
                      <div key={item.id}>
                          {item.title}
                      </div>
                  )
              })}
          </div>
      </main>
    </>
  )
}

export const getServerSideProps:GetServerSideProps = async (context) => {
    // const store = config
    const reduxStore = initializeStore({})
    const data = await fetch('https://jsonplaceholder.typicode.com/todos')
    const result = await data.json()
    reduxStore.dispatch(actions.setTodos(result))
    const initialState = reduxStore.getState()
    const locale = context.locale || 'en'
    return {
        props: {
            ...(await serverSideTranslations(locale, [
                'common',
            ])),
            initialState
        }
    }
}